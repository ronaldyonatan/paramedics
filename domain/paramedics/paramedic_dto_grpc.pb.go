// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc3
// source: domain/paramedics/proto/paramedic_dto.proto

package paramedics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParamedicClient is the client API for Paramedic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParamedicClient interface {
	CreateParamedic(ctx context.Context, in *ParamedicCreateProto, opts ...grpc.CallOption) (*ParamedicProto, error)
	FindByHospital(ctx context.Context, in *ParamedicFindByHospitalProto, opts ...grpc.CallOption) (*ListparamedicProto, error)
}

type paramedicClient struct {
	cc grpc.ClientConnInterface
}

func NewParamedicClient(cc grpc.ClientConnInterface) ParamedicClient {
	return &paramedicClient{cc}
}

func (c *paramedicClient) CreateParamedic(ctx context.Context, in *ParamedicCreateProto, opts ...grpc.CallOption) (*ParamedicProto, error) {
	out := new(ParamedicProto)
	err := c.cc.Invoke(ctx, "/paramedics.Paramedic/CreateParamedic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paramedicClient) FindByHospital(ctx context.Context, in *ParamedicFindByHospitalProto, opts ...grpc.CallOption) (*ListparamedicProto, error) {
	out := new(ListparamedicProto)
	err := c.cc.Invoke(ctx, "/paramedics.Paramedic/FindByHospital", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParamedicServer is the server API for Paramedic service.
// All implementations must embed UnimplementedParamedicServer
// for forward compatibility
type ParamedicServer interface {
	CreateParamedic(context.Context, *ParamedicCreateProto) (*ParamedicProto, error)
	FindByHospital(context.Context, *ParamedicFindByHospitalProto) (*ListparamedicProto, error)
	mustEmbedUnimplementedParamedicServer()
}

// UnimplementedParamedicServer must be embedded to have forward compatible implementations.
type UnimplementedParamedicServer struct {
}

func (UnimplementedParamedicServer) CreateParamedic(context.Context, *ParamedicCreateProto) (*ParamedicProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParamedic not implemented")
}
func (UnimplementedParamedicServer) FindByHospital(context.Context, *ParamedicFindByHospitalProto) (*ListparamedicProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByHospital not implemented")
}
func (UnimplementedParamedicServer) mustEmbedUnimplementedParamedicServer() {}

// UnsafeParamedicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParamedicServer will
// result in compilation errors.
type UnsafeParamedicServer interface {
	mustEmbedUnimplementedParamedicServer()
}

func RegisterParamedicServer(s grpc.ServiceRegistrar, srv ParamedicServer) {
	s.RegisterService(&Paramedic_ServiceDesc, srv)
}

func _Paramedic_CreateParamedic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamedicCreateProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamedicServer).CreateParamedic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paramedics.Paramedic/CreateParamedic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamedicServer).CreateParamedic(ctx, req.(*ParamedicCreateProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paramedic_FindByHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamedicFindByHospitalProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParamedicServer).FindByHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paramedics.Paramedic/FindByHospital",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParamedicServer).FindByHospital(ctx, req.(*ParamedicFindByHospitalProto))
	}
	return interceptor(ctx, in, info, handler)
}

// Paramedic_ServiceDesc is the grpc.ServiceDesc for Paramedic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paramedic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paramedics.Paramedic",
	HandlerType: (*ParamedicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateParamedic",
			Handler:    _Paramedic_CreateParamedic_Handler,
		},
		{
			MethodName: "FindByHospital",
			Handler:    _Paramedic_FindByHospital_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/paramedics/proto/paramedic_dto.proto",
}
